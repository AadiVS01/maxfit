generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// USERS
model User {
  id        Int           @id @default(autoincrement())
  name      String?
  email     String        @unique
  outfits   Outfit[]      
  usages    OutfitUsage[]
  
  // Add clothing relationships
  tops      Top[]
  bottoms   Bottom[]
  onepieces OnePiece[]
  footwear  Footwear[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// OUTFITS
model Outfit {
  id          Int                   @id @default(autoincrement())
  name        String
  imageUrl    String?  
  description String?

  // Many-to-many relations
  tops        Top[]          @relation("OutfitTops")
  bottoms     Bottom[]       @relation("OutfitBottoms")
  onepieces   OnePiece[]     @relation("OutfitOnePieces")
  footwear    Footwear[]     @relation("OutfitFootwears")
  accessories Accessory[]    @relation("OutfitAccessories")

  // Embedding for AI search (optional)
  embedding   Float[]

  tags             Tag[]             @relation("OutfitTags")
  weatherConditions WeatherCondition[] @relation("OutfitWeather")
  outfitUsages      OutfitUsage[]

  userId    Int
  user      User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// TYPE MODELS
model TopType {
  id   Int    @id @default(autoincrement())
  name String @unique
  tops Top[]
}

model BottomType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  bottoms Bottom[]
}

model OnePieceType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  onepieces OnePiece[]
}

model FootwearType {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  footwear Footwear[]
}

model Color {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  hexCode  String
  
  tops      Top[]      @relation("TopColors")
  bottoms   Bottom[]   @relation("BottomColors")
  onepieces OnePiece[] @relation("OnePieceColors")
  footwear  Footwear[] @relation("FootwearColors")
}

// CLOTHING PIECES
model Top {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String?
  embedding Float[]

  topType   TopType? @relation(fields: [topTypeId], references: [id])
  topTypeId Int?

  colors    Color[]  @relation("TopColors")
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  outfits   Outfit[] @relation("OutfitTops")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bottom {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String?
  embedding Float[]

  bottomType   BottomType? @relation(fields: [bottomTypeId], references: [id])
  bottomTypeId Int?

  colors    Color[]  @relation("BottomColors")
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  outfits   Outfit[] @relation("OutfitBottoms")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OnePiece {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String?
  embedding Float[]

  onePieceType   OnePieceType? @relation(fields: [onePieceTypeId], references: [id])
  onePieceTypeId Int?

  colors    Color[]  @relation("OnePieceColors")
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  outfits   Outfit[] @relation("OutfitOnePieces")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Footwear {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String?
  embedding Float[]

  footwearType   FootwearType? @relation(fields: [footwearTypeId], references: [id])
  footwearTypeId Int?

  colors    Color[]  @relation("FootwearColors")
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  outfits   Outfit[] @relation("OutfitFootwears")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accessory {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  imageUrl  String?
  embedding Float[]

  outfits   Outfit[] @relation("OutfitAccessories")
}

// TAGS & WEATHER
model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  outfits Outfit[] @relation("OutfitTags")
}

model WeatherCondition {
  id      Int      @id @default(autoincrement())
  type    String
  outfits Outfit[] @relation("OutfitWeather")
}

// OUTFIT USAGE PER USER
model OutfitUsage {
  id        Int      @id @default(autoincrement())
  outfitId  Int
  outfit    Outfit   @relation(fields: [outfitId], references: [id])

  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  usedAt    DateTime @default(now())
  context   String?  // e.g., "Date Night", "Work"

  @@unique([outfitId, userId, usedAt])
}
